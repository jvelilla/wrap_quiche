note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class QUICHE_FUNCTIONS_API


feature -- Access

	quiche_version: POINTER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_version ();
			]"
		end

	quiche_enable_debug_logging (cb: POINTER; argp: POINTER): INTEGER
		do
			Result := c_quiche_enable_debug_logging (cb, argp)
		ensure
			instance_free: class
		end

	quiche_config_new (version: INTEGER): POINTER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_config_new ((uint32_t)$version);
			]"
		end

	quiche_config_load_cert_chain_from_pem_file (config: CONFIG_STRUCT_API; path: STRING_8): INTEGER
		local
			path_c_string: C_STRING
		do
			create path_c_string.make (path)
			Result := c_quiche_config_load_cert_chain_from_pem_file (config.item, path_c_string.item)
		ensure
			instance_free: class
		end

	quiche_config_load_priv_key_from_pem_file (config: CONFIG_STRUCT_API; path: STRING_8): INTEGER
		local
			path_c_string: C_STRING
		do
			create path_c_string.make (path)
			Result := c_quiche_config_load_priv_key_from_pem_file (config.item, path_c_string.item)
		ensure
			instance_free: class
		end

	quiche_config_verify_peer (config: CONFIG_STRUCT_API; v: INTEGER)
		do
			c_quiche_config_verify_peer (config.item, v)
		ensure
			instance_free: class
		end

	quiche_config_grease (config: CONFIG_STRUCT_API; v: INTEGER)
		do
			c_quiche_config_grease (config.item, v)
		ensure
			instance_free: class
		end

	quiche_config_log_keys (config: CONFIG_STRUCT_API)
		do
			c_quiche_config_log_keys (config.item)
		ensure
			instance_free: class
		end

	quiche_config_enable_early_data (config: CONFIG_STRUCT_API)
		do
			c_quiche_config_enable_early_data (config.item)
		ensure
			instance_free: class
		end

	quiche_config_set_application_protos (config: CONFIG_STRUCT_API; protos: STRING_8; protos_len: INTEGER): INTEGER
		local
			protos_c_string: C_STRING
		do
			create protos_c_string.make (protos)
			Result := c_quiche_config_set_application_protos (config.item, protos_c_string.item, protos_len)
		ensure
			instance_free: class
		end

	quiche_config_set_max_idle_timeout (config: CONFIG_STRUCT_API; v: INTEGER)
		do
			c_quiche_config_set_max_idle_timeout (config.item, v)
		ensure
			instance_free: class
		end

	quiche_config_set_max_packet_size (config: CONFIG_STRUCT_API; v: INTEGER)
		do
			c_quiche_config_set_max_packet_size (config.item, v)
		ensure
			instance_free: class
		end

	quiche_config_set_initial_max_data (config: CONFIG_STRUCT_API; v: INTEGER)
		do
			c_quiche_config_set_initial_max_data (config.item, v)
		ensure
			instance_free: class
		end

	quiche_config_set_initial_max_stream_data_bidi_local (config: CONFIG_STRUCT_API; v: INTEGER)
		do
			c_quiche_config_set_initial_max_stream_data_bidi_local (config.item, v)
		ensure
			instance_free: class
		end

	quiche_config_set_initial_max_stream_data_bidi_remote (config: CONFIG_STRUCT_API; v: INTEGER)
		do
			c_quiche_config_set_initial_max_stream_data_bidi_remote (config.item, v)
		ensure
			instance_free: class
		end

	quiche_config_set_initial_max_stream_data_uni (config: CONFIG_STRUCT_API; v: INTEGER)
		do
			c_quiche_config_set_initial_max_stream_data_uni (config.item, v)
		ensure
			instance_free: class
		end

	quiche_config_set_initial_max_streams_bidi (config: CONFIG_STRUCT_API; v: INTEGER)
		do
			c_quiche_config_set_initial_max_streams_bidi (config.item, v)
		ensure
			instance_free: class
		end

	quiche_config_set_initial_max_streams_uni (config: CONFIG_STRUCT_API; v: INTEGER)
		do
			c_quiche_config_set_initial_max_streams_uni (config.item, v)
		ensure
			instance_free: class
		end

	quiche_config_set_ack_delay_exponent (config: CONFIG_STRUCT_API; v: INTEGER)
		do
			c_quiche_config_set_ack_delay_exponent (config.item, v)
		ensure
			instance_free: class
		end

	quiche_config_set_max_ack_delay (config: CONFIG_STRUCT_API; v: INTEGER)
		do
			c_quiche_config_set_max_ack_delay (config.item, v)
		ensure
			instance_free: class
		end

	quiche_config_set_disable_active_migration (config: CONFIG_STRUCT_API; v: INTEGER)
		do
			c_quiche_config_set_disable_active_migration (config.item, v)
		ensure
			instance_free: class
		end

	quiche_config_set_cc_algorithm (config: CONFIG_STRUCT_API; algo: INTEGER)
		do
			c_quiche_config_set_cc_algorithm (config.item, algo)
		ensure
			instance_free: class
		end

	quiche_config_enable_hystart (config: CONFIG_STRUCT_API; v: INTEGER)
		do
			c_quiche_config_enable_hystart (config.item, v)
		ensure
			instance_free: class
		end

	quiche_config_free (config: CONFIG_STRUCT_API)
		do
			c_quiche_config_free (config.item)
		ensure
			instance_free: class
		end

	quiche_header_info (buf: STRING_8; buf_len: INTEGER; dcil: INTEGER; version: POINTER; type: STRING_8; scid: STRING_8; scid_len: POINTER; dcid: STRING_8; dcid_len: POINTER; token: STRING_8; token_len: POINTER): INTEGER
		local
			buf_c_string: C_STRING
			type_c_string: C_STRING
			scid_c_string: C_STRING
			dcid_c_string: C_STRING
			token_c_string: C_STRING
		do
			create buf_c_string.make (buf)
			create type_c_string.make (type)
			create scid_c_string.make (scid)
			create dcid_c_string.make (dcid)
			create token_c_string.make (token)
			Result := c_quiche_header_info (buf_c_string.item, buf_len, dcil, version, type_c_string.item, scid_c_string.item, scid_len, dcid_c_string.item, dcid_len, token_c_string.item, token_len)
		ensure
			instance_free: class
		end

	quiche_accept (scid: STRING_8; scid_len: INTEGER; odcid: STRING_8; odcid_len: INTEGER; config: CONFIG_STRUCT_API): detachable CONNECTION_STRUCT_API
		local
			scid_c_string: C_STRING
			odcid_c_string: C_STRING
		do
			create scid_c_string.make (scid)
			create odcid_c_string.make (odcid)
			if attached c_quiche_accept (scid_c_string.item, scid_len, odcid_c_string.item, odcid_len, config.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	quiche_connect (server_name: STRING_8; scid: STRING_8; scid_len: INTEGER; config: CONFIG_STRUCT_API): detachable CONNECTION_STRUCT_API
		local
			server_name_c_string: C_STRING
			scid_c_string: C_STRING
		do
			create server_name_c_string.make (server_name)
			create scid_c_string.make (scid)
			if attached c_quiche_connect (server_name_c_string.item, scid_c_string.item, scid_len, config.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	quiche_negotiate_version (scid: POINTER; scid_len: INTEGER; dcid: POINTER; dcid_len: INTEGER; a_out: POINTER; out_len: INTEGER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_negotiate_version ((uint8_t const*)$scid, (size_t)$scid_len, (uint8_t const*)$dcid, (size_t)$dcid_len, (uint8_t*)$a_out, (size_t)$out_len);
			]"
		end

	quiche_retry (scid: POINTER; scid_len: INTEGER; dcid: POINTER; dcid_len: INTEGER; new_scid: POINTER; new_scid_len: INTEGER; token: POINTER; token_len: INTEGER; a_out: POINTER; out_len: INTEGER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_retry ((uint8_t const*)$scid, (size_t)$scid_len, (uint8_t const*)$dcid, (size_t)$dcid_len, (uint8_t const*)$new_scid, (size_t)$new_scid_len, (uint8_t const*)$token, (size_t)$token_len, (uint8_t*)$a_out, (size_t)$out_len);
			]"
		end

	quiche_version_is_supported (version: INTEGER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_version_is_supported ((uint32_t)$version);
			]"
		end

	quiche_conn_new_with_tls (scid: STRING_8; scid_len: INTEGER; odcid: STRING_8; odcid_len: INTEGER; config: CONFIG_STRUCT_API; ssl: POINTER; is_server: INTEGER): detachable CONNECTION_STRUCT_API
		local
			scid_c_string: C_STRING
			odcid_c_string: C_STRING
		do
			create scid_c_string.make (scid)
			create odcid_c_string.make (odcid)
			if attached c_quiche_conn_new_with_tls (scid_c_string.item, scid_len, odcid_c_string.item, odcid_len, config.item, ssl, is_server) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

--	quiche_conn_set_qlog_path (conn: CONNECTION_STRUCT_API; path: STRING_8; log_title: STRING_8; log_desc: STRING_8): INTEGER
--		local
--			path_c_string: C_STRING
--			log_title_c_string: C_STRING
--			log_desc_c_string: C_STRING
--		do
--			create path_c_string.make (path)
--			create log_title_c_string.make (log_title)
--			create log_desc_c_string.make (log_desc)
--			Result := c_quiche_conn_set_qlog_path (conn.item, path_c_string.item, log_title_c_string.item, log_desc_c_string.item)
--		ensure
--			instance_free: class
--		end

--	quiche_conn_set_qlog_fd (conn: CONNECTION_STRUCT_API; fd: INTEGER; log_title: STRING_8; log_desc: STRING_8)
--		local
--			log_title_c_string: C_STRING
--			log_desc_c_string: C_STRING
--		do
--			create log_title_c_string.make (log_title)
--			create log_desc_c_string.make (log_desc)
--			c_quiche_conn_set_qlog_fd (conn.item, fd, log_title_c_string.item, log_desc_c_string.item)
--		ensure
--			instance_free: class
--		end

	quiche_conn_recv (conn: CONNECTION_STRUCT_API; buf: STRING_8; buf_len: INTEGER): INTEGER
		local
			buf_c_string: C_STRING
		do
			create buf_c_string.make (buf)
			Result := c_quiche_conn_recv (conn.item, buf_c_string.item, buf_len)
		ensure
			instance_free: class
		end

	quiche_conn_send (conn: CONNECTION_STRUCT_API; a_out: STRING_8; out_len: INTEGER): INTEGER
		local
			a_out_c_string: C_STRING
		do
			create a_out_c_string.make (a_out)
			Result := c_quiche_conn_send (conn.item, a_out_c_string.item, out_len)
		ensure
			instance_free: class
		end

	quiche_conn_stream_recv (conn: CONNECTION_STRUCT_API; stream_id: INTEGER; a_out: STRING_8; buf_len: INTEGER; fin: POINTER): INTEGER
		local
			a_out_c_string: C_STRING
		do
			create a_out_c_string.make (a_out)
			Result := c_quiche_conn_stream_recv (conn.item, stream_id, a_out_c_string.item, buf_len, fin)
		ensure
			instance_free: class
		end

	quiche_conn_stream_send (conn: CONNECTION_STRUCT_API; stream_id: INTEGER; buf: STRING_8; buf_len: INTEGER; fin: INTEGER): INTEGER
		local
			buf_c_string: C_STRING
		do
			create buf_c_string.make (buf)
			Result := c_quiche_conn_stream_send (conn.item, stream_id, buf_c_string.item, buf_len, fin)
		ensure
			instance_free: class
		end

	quiche_conn_stream_shutdown (conn: CONNECTION_STRUCT_API; stream_id: INTEGER; direction: INTEGER; err: INTEGER): INTEGER
		do
			Result := c_quiche_conn_stream_shutdown (conn.item, stream_id, direction, err)
		ensure
			instance_free: class
		end

	quiche_conn_stream_capacity (conn: CONNECTION_STRUCT_API; stream_id: INTEGER): INTEGER
		do
			Result := c_quiche_conn_stream_capacity (conn.item, stream_id)
		ensure
			instance_free: class
		end

	quiche_conn_stream_finished (conn: CONNECTION_STRUCT_API; stream_id: INTEGER): INTEGER
		do
			Result := c_quiche_conn_stream_finished (conn.item, stream_id)
		ensure
			instance_free: class
		end

	quiche_conn_readable (conn: CONNECTION_STRUCT_API): detachable STREAM_ITER_STRUCT_API
		do
			if attached c_quiche_conn_readable (conn.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	quiche_conn_writable (conn: CONNECTION_STRUCT_API): detachable STREAM_ITER_STRUCT_API
		do
			if attached c_quiche_conn_writable (conn.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	quiche_conn_timeout_as_nanos (conn: CONNECTION_STRUCT_API): INTEGER
		do
			Result := c_quiche_conn_timeout_as_nanos (conn.item)
		ensure
			instance_free: class
		end

	quiche_conn_timeout_as_millis (conn: CONNECTION_STRUCT_API): INTEGER
		do
			Result := c_quiche_conn_timeout_as_millis (conn.item)
		ensure
			instance_free: class
		end

	quiche_conn_on_timeout (conn: CONNECTION_STRUCT_API)
		do
			c_quiche_conn_on_timeout (conn.item)
		ensure
			instance_free: class
		end

	quiche_conn_close (conn: CONNECTION_STRUCT_API; app: INTEGER; err: INTEGER; reason: STRING_8; reason_len: INTEGER): INTEGER
		local
			reason_c_string: C_STRING
		do
			create reason_c_string.make (reason)
			Result := c_quiche_conn_close (conn.item, app, err, reason_c_string.item, reason_len)
		ensure
			instance_free: class
		end

	quiche_conn_application_proto (conn: CONNECTION_STRUCT_API; a_out: POINTER; out_len: POINTER)
		do
			c_quiche_conn_application_proto (conn.item, a_out, out_len)
		ensure
			instance_free: class
		end

	quiche_conn_is_established (conn: CONNECTION_STRUCT_API): INTEGER
		do
			Result := c_quiche_conn_is_established (conn.item)
		ensure
			instance_free: class
		end

	quiche_conn_is_in_early_data (conn: CONNECTION_STRUCT_API): INTEGER
		do
			Result := c_quiche_conn_is_in_early_data (conn.item)
		ensure
			instance_free: class
		end

	quiche_conn_is_closed (conn: CONNECTION_STRUCT_API): INTEGER
		do
			Result := c_quiche_conn_is_closed (conn.item)
		ensure
			instance_free: class
		end

	quiche_conn_stream_init_application_data (conn: CONNECTION_STRUCT_API; stream_id: INTEGER; data: POINTER): INTEGER
		do
			Result := c_quiche_conn_stream_init_application_data (conn.item, stream_id, data)
		ensure
			instance_free: class
		end

	quiche_conn_stream_application_data (conn: CONNECTION_STRUCT_API; stream_id: INTEGER): POINTER
		do
			Result := c_quiche_conn_stream_application_data (conn.item, stream_id)
		ensure
			instance_free: class
		end

	quiche_stream_iter_next (iter: STREAM_ITER_STRUCT_API; stream_id: POINTER): INTEGER
		do
			Result := c_quiche_stream_iter_next (iter.item, stream_id)
		ensure
			instance_free: class
		end

	quiche_stream_iter_free (iter: STREAM_ITER_STRUCT_API)
		do
			c_quiche_stream_iter_free (iter.item)
		ensure
			instance_free: class
		end

	quiche_conn_stats (conn: CONNECTION_STRUCT_API; a_out: QUICHE_STATS_STRUCT_API)
		do
			c_quiche_conn_stats (conn.item, a_out.item)
		ensure
			instance_free: class
		end

	quiche_conn_free (conn: CONNECTION_STRUCT_API)
		do
			c_quiche_conn_free (conn.item)
		ensure
			instance_free: class
		end

	quiche_h3_config_new: detachable HTTP3CONFIG_STRUCT_API
		do
			if attached c_quiche_h3_config_new as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	quiche_h3_config_set_max_header_list_size (config: HTTP3CONFIG_STRUCT_API; v: INTEGER)
		do
			c_quiche_h3_config_set_max_header_list_size (config.item, v)
		ensure
			instance_free: class
		end

	quiche_h3_config_set_qpack_max_table_capacity (config: HTTP3CONFIG_STRUCT_API; v: INTEGER)
		do
			c_quiche_h3_config_set_qpack_max_table_capacity (config.item, v)
		ensure
			instance_free: class
		end

	quiche_h3_config_set_qpack_blocked_streams (config: HTTP3CONFIG_STRUCT_API; v: INTEGER)
		do
			c_quiche_h3_config_set_qpack_blocked_streams (config.item, v)
		ensure
			instance_free: class
		end

	quiche_h3_config_free (config: HTTP3CONFIG_STRUCT_API)
		do
			c_quiche_h3_config_free (config.item)
		ensure
			instance_free: class
		end

--	quiche_h3_accept (quiche_conn: CONNECTION_STRUCT_API; config: HTTP3CONFIG_STRUCT_API): detachable HTTP3CONNECTION_STRUCT_API
--		do
--			if attached c_quiche_h3_accept (quiche_conn.item, config.item) as l_ptr and then not l_ptr.is_default_pointer then
--				create Result.make_by_pointer ( l_ptr )
--			end

--		ensure
--			instance_free: class
--		end

	quiche_h3_conn_new_with_transport (quiche_conn: CONNECTION_STRUCT_API; config: HTTP3CONFIG_STRUCT_API): detachable HTTP3CONNECTION_STRUCT_API
		do
			if attached c_quiche_h3_conn_new_with_transport (quiche_conn.item, config.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	quiche_h3_conn_poll (conn: HTTP3CONNECTION_STRUCT_API; quic_conn: CONNECTION_STRUCT_API; ev: HTTP3EVENT_STRUCT_API): INTEGER
		do
			Result := c_quiche_h3_conn_poll (conn.item, quic_conn.item, ev.item)
		ensure
			instance_free: class
		end

	quiche_h3_event_type (ev: HTTP3EVENT_STRUCT_API): INTEGER
		do
			Result := c_quiche_h3_event_type (ev.item)
		ensure
			instance_free: class
		end

	quiche_h3_event_for_each_header (ev: HTTP3EVENT_STRUCT_API; cb: POINTER; argp: POINTER): INTEGER
		do
			Result := c_quiche_h3_event_for_each_header (ev.item, cb, argp)
		ensure
			instance_free: class
		end

	quiche_h3_event_headers_has_body (ev: HTTP3EVENT_STRUCT_API): INTEGER
		do
			Result := c_quiche_h3_event_headers_has_body (ev.item)
		ensure
			instance_free: class
		end

	quiche_h3_event_free (ev: HTTP3EVENT_STRUCT_API)
		do
			c_quiche_h3_event_free (ev.item)
		ensure
			instance_free: class
		end

	quiche_h3_send_request (conn: HTTP3CONNECTION_STRUCT_API; quic_conn: CONNECTION_STRUCT_API; headers: QUICHE_H3_HEADER_STRUCT_API; headers_len: INTEGER; fin: INTEGER): INTEGER
		do
			Result := c_quiche_h3_send_request (conn.item, quic_conn.item, headers.item, headers_len, fin)
		ensure
			instance_free: class
		end

	quiche_h3_send_response (conn: HTTP3CONNECTION_STRUCT_API; quic_conn: CONNECTION_STRUCT_API; stream_id: INTEGER; headers: QUICHE_H3_HEADER_STRUCT_API; headers_len: INTEGER; fin: INTEGER): INTEGER
		do
			Result := c_quiche_h3_send_response (conn.item, quic_conn.item, stream_id, headers.item, headers_len, fin)
		ensure
			instance_free: class
		end

	quiche_h3_send_body (conn: HTTP3CONNECTION_STRUCT_API; quic_conn: CONNECTION_STRUCT_API; stream_id: INTEGER; body: STRING_8; body_len: INTEGER; fin: INTEGER): INTEGER
		local
			body_c_string: C_STRING
		do
			create body_c_string.make (body)
			Result := c_quiche_h3_send_body (conn.item, quic_conn.item, stream_id, body_c_string.item, body_len, fin)
		ensure
			instance_free: class
		end

	quiche_h3_recv_body (conn: HTTP3CONNECTION_STRUCT_API; quic_conn: CONNECTION_STRUCT_API; stream_id: INTEGER; a_out: STRING_8; out_len: INTEGER): INTEGER
		local
			a_out_c_string: C_STRING
		do
			create a_out_c_string.make (a_out)
			Result := c_quiche_h3_recv_body (conn.item, quic_conn.item, stream_id, a_out_c_string.item, out_len)
		ensure
			instance_free: class
		end

	quiche_h3_conn_free (conn: HTTP3CONNECTION_STRUCT_API)
		do
			c_quiche_h3_conn_free (conn.item)
		ensure
			instance_free: class
		end

feature -- Externals

	c_quiche_enable_debug_logging (cb: POINTER; argp: POINTER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_enable_debug_logging ((void (*) (char const *line, void *argp))$cb, (void*)$argp);
			]"
		end

	c_quiche_config_load_cert_chain_from_pem_file (config: POINTER; path: POINTER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_config_load_cert_chain_from_pem_file ((quiche_config*)$config, (char const*)$path);
			]"
		end

	c_quiche_config_load_priv_key_from_pem_file (config: POINTER; path: POINTER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_config_load_priv_key_from_pem_file ((quiche_config*)$config, (char const*)$path);
			]"
		end

	c_quiche_config_verify_peer (config: POINTER; v: INTEGER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_config_verify_peer ((quiche_config*)$config, (_Bool)$v);
			]"
		end

	c_quiche_config_grease (config: POINTER; v: INTEGER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_config_grease ((quiche_config*)$config, (_Bool)$v);
			]"
		end

	c_quiche_config_log_keys (config: POINTER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_config_log_keys ((quiche_config*)$config);
			]"
		end

	c_quiche_config_enable_early_data (config: POINTER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_config_enable_early_data ((quiche_config*)$config);
			]"
		end

	c_quiche_config_set_application_protos (config: POINTER; protos: POINTER; protos_len: INTEGER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_config_set_application_protos ((quiche_config*)$config, (uint8_t const*)$protos, (size_t)$protos_len);
			]"
		end

	c_quiche_config_set_max_idle_timeout (config: POINTER; v: INTEGER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_config_set_max_idle_timeout ((quiche_config*)$config, (uint64_t)$v);
			]"
		end

	c_quiche_config_set_max_packet_size (config: POINTER; v: INTEGER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_config_set_max_packet_size ((quiche_config*)$config, (uint64_t)$v);
			]"
		end

	c_quiche_config_set_initial_max_data (config: POINTER; v: INTEGER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_config_set_initial_max_data ((quiche_config*)$config, (uint64_t)$v);
			]"
		end

	c_quiche_config_set_initial_max_stream_data_bidi_local (config: POINTER; v: INTEGER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_config_set_initial_max_stream_data_bidi_local ((quiche_config*)$config, (uint64_t)$v);
			]"
		end

	c_quiche_config_set_initial_max_stream_data_bidi_remote (config: POINTER; v: INTEGER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_config_set_initial_max_stream_data_bidi_remote ((quiche_config*)$config, (uint64_t)$v);
			]"
		end

	c_quiche_config_set_initial_max_stream_data_uni (config: POINTER; v: INTEGER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_config_set_initial_max_stream_data_uni ((quiche_config*)$config, (uint64_t)$v);
			]"
		end

	c_quiche_config_set_initial_max_streams_bidi (config: POINTER; v: INTEGER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_config_set_initial_max_streams_bidi ((quiche_config*)$config, (uint64_t)$v);
			]"
		end

	c_quiche_config_set_initial_max_streams_uni (config: POINTER; v: INTEGER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_config_set_initial_max_streams_uni ((quiche_config*)$config, (uint64_t)$v);
			]"
		end

	c_quiche_config_set_ack_delay_exponent (config: POINTER; v: INTEGER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_config_set_ack_delay_exponent ((quiche_config*)$config, (uint64_t)$v);
			]"
		end

	c_quiche_config_set_max_ack_delay (config: POINTER; v: INTEGER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_config_set_max_ack_delay ((quiche_config*)$config, (uint64_t)$v);
			]"
		end

	c_quiche_config_set_disable_active_migration (config: POINTER; v: INTEGER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_config_set_disable_active_migration ((quiche_config*)$config, (_Bool)$v);
			]"
		end

	c_quiche_config_set_cc_algorithm (config: POINTER; algo: INTEGER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_config_set_cc_algorithm ((quiche_config*)$config, (enum quiche_cc_algorithm)$algo);
			]"
		end

	c_quiche_config_enable_hystart (config: POINTER; v: INTEGER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_config_enable_hystart ((quiche_config*)$config, (_Bool)$v);
			]"
		end

	c_quiche_config_free (config: POINTER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_config_free ((quiche_config*)$config);
			]"
		end

	c_quiche_header_info (buf: POINTER; buf_len: INTEGER; dcil: INTEGER; version: POINTER; type: POINTER; scid: POINTER; scid_len: POINTER; dcid: POINTER; dcid_len: POINTER; token: POINTER; token_len: POINTER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_header_info ((uint8_t const*)$buf, (size_t)$buf_len, (size_t)$dcil, (uint32_t*)$version, (uint8_t*)$type, (uint8_t*)$scid, (size_t*)$scid_len, (uint8_t*)$dcid, (size_t*)$dcid_len, (uint8_t*)$token, (size_t*)$token_len);
			]"
		end

	c_quiche_accept (scid: POINTER; scid_len: INTEGER; odcid: POINTER; odcid_len: INTEGER; config: POINTER): POINTER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_accept ((uint8_t const*)$scid, (size_t)$scid_len, (uint8_t const*)$odcid, (size_t)$odcid_len, (quiche_config*)$config);
			]"
		end

	c_quiche_connect (server_name: POINTER; scid: POINTER; scid_len: INTEGER; config: POINTER): POINTER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_connect ((char const*)$server_name, (uint8_t const*)$scid, (size_t)$scid_len, (quiche_config*)$config);
			]"
		end

	c_quiche_conn_new_with_tls (scid: POINTER; scid_len: INTEGER; odcid: POINTER; odcid_len: INTEGER; config: POINTER; ssl: POINTER; is_server: INTEGER): POINTER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_conn_new_with_tls ((uint8_t const*)$scid, (size_t)$scid_len, (uint8_t const*)$odcid, (size_t)$odcid_len, (quiche_config*)$config, (void*)$ssl, (_Bool)$is_server);
			]"
		end

--	c_quiche_conn_set_qlog_path (conn: POINTER; path: POINTER; log_title: POINTER; log_desc: POINTER): INTEGER
--		external
--			"C inline use <eif_quiche.h>"
--		alias
--			"[
--				return quiche_conn_set_qlog_path ((quiche_conn*)$conn, (char const*)$path, (char const*)$log_title, (char const*)$log_desc);
--			]"
--		end

--	c_quiche_conn_set_qlog_fd (conn: POINTER; fd: INTEGER; log_title: POINTER; log_desc: POINTER)
--		external
--			"C inline use <eif_quiche.h>"
--		alias
--			"[
--				quiche_conn_set_qlog_fd ((quiche_conn*)$conn, (int)$fd, (char const*)$log_title, (char const*)$log_desc);
--			]"
--		end

	c_quiche_conn_recv (conn: POINTER; buf: POINTER; buf_len: INTEGER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_conn_recv ((quiche_conn*)$conn, (uint8_t*)$buf, (size_t)$buf_len);
			]"
		end

	c_quiche_conn_send (conn: POINTER; a_out: POINTER; out_len: INTEGER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_conn_send ((quiche_conn*)$conn, (uint8_t*)$a_out, (size_t)$out_len);
			]"
		end

	c_quiche_conn_stream_recv (conn: POINTER; stream_id: INTEGER; a_out: POINTER; buf_len: INTEGER; fin: POINTER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_conn_stream_recv ((quiche_conn*)$conn, (uint64_t)$stream_id, (uint8_t*)$a_out, (size_t)$buf_len, (_Bool*)$fin);
			]"
		end

	c_quiche_conn_stream_send (conn: POINTER; stream_id: INTEGER; buf: POINTER; buf_len: INTEGER; fin: INTEGER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_conn_stream_send ((quiche_conn*)$conn, (uint64_t)$stream_id, (uint8_t const*)$buf, (size_t)$buf_len, (_Bool)$fin);
			]"
		end

	c_quiche_conn_stream_shutdown (conn: POINTER; stream_id: INTEGER; direction: INTEGER; err: INTEGER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_conn_stream_shutdown ((quiche_conn*)$conn, (uint64_t)$stream_id, (enum quiche_shutdown)$direction, (uint64_t)$err);
			]"
		end

	c_quiche_conn_stream_capacity (conn: POINTER; stream_id: INTEGER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_conn_stream_capacity ((quiche_conn*)$conn, (uint64_t)$stream_id);
			]"
		end

	c_quiche_conn_stream_finished (conn: POINTER; stream_id: INTEGER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_conn_stream_finished ((quiche_conn*)$conn, (uint64_t)$stream_id);
			]"
		end

	c_quiche_conn_readable (conn: POINTER): POINTER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_conn_readable ((quiche_conn*)$conn);
			]"
		end

	c_quiche_conn_writable (conn: POINTER): POINTER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_conn_writable ((quiche_conn*)$conn);
			]"
		end

	c_quiche_conn_timeout_as_nanos (conn: POINTER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_conn_timeout_as_nanos ((quiche_conn*)$conn);
			]"
		end

	c_quiche_conn_timeout_as_millis (conn: POINTER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_conn_timeout_as_millis ((quiche_conn*)$conn);
			]"
		end

	c_quiche_conn_on_timeout (conn: POINTER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_conn_on_timeout ((quiche_conn*)$conn);
			]"
		end

	c_quiche_conn_close (conn: POINTER; app: INTEGER; err: INTEGER; reason: POINTER; reason_len: INTEGER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_conn_close ((quiche_conn*)$conn, (_Bool)$app, (uint64_t)$err, (uint8_t const*)$reason, (size_t)$reason_len);
			]"
		end

	c_quiche_conn_application_proto (conn: POINTER; a_out: POINTER; out_len: POINTER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_conn_application_proto ((quiche_conn*)$conn, (uint8_t const**)$a_out, (size_t*)$out_len);
			]"
		end

	c_quiche_conn_is_established (conn: POINTER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_conn_is_established ((quiche_conn*)$conn);
			]"
		end

	c_quiche_conn_is_in_early_data (conn: POINTER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_conn_is_in_early_data ((quiche_conn*)$conn);
			]"
		end

	c_quiche_conn_is_closed (conn: POINTER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_conn_is_closed ((quiche_conn*)$conn);
			]"
		end

	c_quiche_conn_stream_init_application_data (conn: POINTER; stream_id: INTEGER; data: POINTER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_conn_stream_init_application_data ((quiche_conn*)$conn, (uint64_t)$stream_id, (void*)$data);
			]"
		end

	c_quiche_conn_stream_application_data (conn: POINTER; stream_id: INTEGER): POINTER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_conn_stream_application_data ((quiche_conn*)$conn, (uint64_t)$stream_id);
			]"
		end

	c_quiche_stream_iter_next (iter: POINTER; stream_id: POINTER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_stream_iter_next ((quiche_stream_iter*)$iter, (uint64_t*)$stream_id);
			]"
		end

	c_quiche_stream_iter_free (iter: POINTER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_stream_iter_free ((quiche_stream_iter*)$iter);
			]"
		end

	c_quiche_conn_stats (conn: POINTER; a_out: POINTER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_conn_stats ((quiche_conn*)$conn, (quiche_stats*)$a_out);
			]"
		end

	c_quiche_conn_free (conn: POINTER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_conn_free ((quiche_conn*)$conn);
			]"
		end

	c_quiche_h3_config_new: POINTER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_h3_config_new ();
			]"
		end

	c_quiche_h3_config_set_max_header_list_size (config: POINTER; v: INTEGER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_h3_config_set_max_header_list_size ((quiche_h3_config*)$config, (uint64_t)$v);
			]"
		end

	c_quiche_h3_config_set_qpack_max_table_capacity (config: POINTER; v: INTEGER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_h3_config_set_qpack_max_table_capacity ((quiche_h3_config*)$config, (uint64_t)$v);
			]"
		end

	c_quiche_h3_config_set_qpack_blocked_streams (config: POINTER; v: INTEGER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_h3_config_set_qpack_blocked_streams ((quiche_h3_config*)$config, (uint64_t)$v);
			]"
		end

	c_quiche_h3_config_free (config: POINTER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_h3_config_free ((quiche_h3_config*)$config);
			]"
		end

--	c_quiche_h3_accept (quiche_conn: POINTER; config: POINTER): POINTER
--		external
--			"C inline use <eif_quiche.h>"
--		alias
--			"[
--				return quiche_h3_accept ((quiche_conn*)$quiche_conn, (quiche_h3_config*)$config);
--			]"
--		end

	c_quiche_h3_conn_new_with_transport (quiche_conn: POINTER; config: POINTER): POINTER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_h3_conn_new_with_transport ((quiche_conn*)$quiche_conn, (quiche_h3_config*)$config);
			]"
		end

	c_quiche_h3_conn_poll (conn: POINTER; quic_conn: POINTER; ev: POINTER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_h3_conn_poll ((quiche_h3_conn*)$conn, (quiche_conn*)$quic_conn, (quiche_h3_event**)$ev);
			]"
		end

	c_quiche_h3_event_type (ev: POINTER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_h3_event_type ((quiche_h3_event*)$ev);
			]"
		end

	c_quiche_h3_event_for_each_header (ev: POINTER; cb: POINTER; argp: POINTER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_h3_event_for_each_header ((quiche_h3_event*)$ev, (int (*) (uint8_t *name, size_t name_len, uint8_t *value, size_t value_len, void *argp))$cb, (void*)$argp);
			]"
		end

	c_quiche_h3_event_headers_has_body (ev: POINTER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_h3_event_headers_has_body ((quiche_h3_event*)$ev);
			]"
		end

	c_quiche_h3_event_free (ev: POINTER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_h3_event_free ((quiche_h3_event*)$ev);
			]"
		end

	c_quiche_h3_send_request (conn: POINTER; quic_conn: POINTER; headers: POINTER; headers_len: INTEGER; fin: INTEGER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_h3_send_request ((quiche_h3_conn*)$conn, (quiche_conn*)$quic_conn, (quiche_h3_header*)$headers, (size_t)$headers_len, (_Bool)$fin);
			]"
		end

	c_quiche_h3_send_response (conn: POINTER; quic_conn: POINTER; stream_id: INTEGER; headers: POINTER; headers_len: INTEGER; fin: INTEGER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_h3_send_response ((quiche_h3_conn*)$conn, (quiche_conn*)$quic_conn, (uint64_t)$stream_id, (quiche_h3_header*)$headers, (size_t)$headers_len, (_Bool)$fin);
			]"
		end

	c_quiche_h3_send_body (conn: POINTER; quic_conn: POINTER; stream_id: INTEGER; body: POINTER; body_len: INTEGER; fin: INTEGER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_h3_send_body ((quiche_h3_conn*)$conn, (quiche_conn*)$quic_conn, (uint64_t)$stream_id, (uint8_t*)$body, (size_t)$body_len, (_Bool)$fin);
			]"
		end

	c_quiche_h3_recv_body (conn: POINTER; quic_conn: POINTER; stream_id: INTEGER; a_out: POINTER; out_len: INTEGER): INTEGER
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				return quiche_h3_recv_body ((quiche_h3_conn*)$conn, (quiche_conn*)$quic_conn, (uint64_t)$stream_id, (uint8_t*)$a_out, (size_t)$out_len);
			]"
		end

	c_quiche_h3_conn_free (conn: POINTER)
		external
			"C inline use <eif_quiche.h>"
		alias
			"[
				quiche_h3_conn_free ((quiche_h3_conn*)$conn);
			]"
		end

feature -- Externals Address

end
